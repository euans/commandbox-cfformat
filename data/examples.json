{
    "alignment.consecutive.assignments":{
        "true":"// alignment.consecutive.assignments: true\nvar a  = 1;\nvar ab = 2;",
        "false":"// alignment.consecutive.assignments: false\nvar a = 1;\nvar ab = 2;"
    },
    "alignment.consecutive.params":{
        "true":"// alignment.consecutive.params: true\nparam name=\"a\"       type=\"string\";\nparam name=\"abcdefg\" type=\"string\";",
        "false":"// alignment.consecutive.params: false\nparam name=\"a\" type=\"string\";\nparam name=\"abcdefg\" type=\"string\";"
    },
    "alignment.consecutive.properties":{
        "true":"// alignment.consecutive.properties: true\nproperty name=\"requestService\" inject=\"coldbox:requestService\";\nproperty name=\"log\"            inject=\"logbox:logger:{this}\";",
        "false":"// alignment.consecutive.properties: false\nproperty name=\"requestService\" inject=\"coldbox:requestService\";\nproperty name=\"log\" inject=\"logbox:logger:{this}\";"
    },
    "array.empty_padding":{
        "true":"// array.empty_padding: true\nmyArray = [ ];",
        "false":"// array.empty_padding: false\nmyArray = [];"
    },
    "array.multiline.leading_comma":{
        "true":"// array.multiline.leading_comma: true\nmyArray = [\n      1\n    , 2\n    , 3\n    , 4\n];",
        "false":"// array.multiline.leading_comma: false\nmyArray = [\n    1,\n    2,\n    3,\n    4\n];"
    },
    "array.multiline.leading_comma.padding":{
        "true":"// array.multiline.leading_comma.padding: true\nmyArray = [\n      1\n    , 2\n    , 3\n    , 4\n];",
        "false":"// array.multiline.leading_comma.padding: false\nmyArray = [\n     1\n    ,2\n    ,3\n    ,4\n];"
    },
    "array.padding":{
        "true":"// array.padding: true\nmyArray = [ 1, 2 ];",
        "false":"// array.padding: false\nmyArray = [1, 2];"
    },
    "binary_operators.padding":{
        "true":"// binary_operators.padding: true\na = 1 + 2;",
        "false":"// binary_operators.padding: false\na=1+2;"
    },
    "brackets.padding":{
        "true":"// brackets.padding: true\na[ 'mykey' ][ 1 ] = 7;",
        "false":"// brackets.padding: false\na['mykey'][1] = 7;"
    },
    "comment.asterisks":{
        "align":"// comment.asterisks: \"align\"\n{\n    /**\n     * a comment\n     */\n}",
        "indent":"// comment.asterisks: \"indent\"\n{\n    /**\n    * a comment\n    */\n}",
        "ignored":"// comment.asterisks: \"ignored\"\n{\n    /**\n      * a comment\n    */\n}"
    },
    "for_loop_semicolons.padding":{
        "true":"// for_loop_semicolons.padding: true\nfor (var i = 0; i < 10; i++) {\n}",
        "false":"// for_loop_semicolons.padding: false\nfor (var i = 0;i < 10;i++) {\n}"
    },
    "function_anonymous.empty_padding":{
        "true":"// function_anonymous.empty_padding: true\nfunction( ) {\n}",
        "false":"// function_anonymous.empty_padding: false\nfunction() {\n}"
    },
    "function_anonymous.spacing_to_group":{
        "true":"// function_anonymous.spacing_to_group: true\nif (true) {\n}",
        "false":"// function_anonymous.spacing_to_group: false\nif(true) {\n}"
    },
    "function_anonymous.group_to_block_spacing":{
        "spaced":"// function_anonymous.group_to_block_spacing: \"spaced\"\nfunction() {\n}",
        "compact":"// function_anonymous.group_to_block_spacing: \"compact\"\nfunction(){\n}",
        "newline":"// function_anonymous.group_to_block_spacing: \"newline\"\nfunction()\n{\n}"
    },
    "function_anonymous.multiline.leading_comma":{
        "true":"// function_anonymous.multiline.leading_comma: true\nfunction(\n      a\n    , b\n    , c\n    , d\n) {\n}",
        "false":"// function_anonymous.multiline.leading_comma: false\nfunction(\n    a,\n    b,\n    c,\n    d\n) {\n}"
    },
    "function_anonymous.multiline.leading_comma.padding":{
        "true":"// function_anonymous.multiline.leading_comma.padding: true\nfunction(\n      a\n    , b\n    , c\n    , d\n) {\n}",
        "false":"// function_anonymous.multiline.leading_comma.padding: false\nfunction(\n     a\n    ,b\n    ,c\n    ,d\n) {\n}"
    },
    "function_anonymous.padding":{
        "true":"// function_anonymous.padding: true\nfunction( a, b ) {\n}",
        "false":"// function_anonymous.padding: false\nfunction(a, b) {\n}"
    },
    "function_call.casing.builtin":{
        "cfdocs":"// function_call.casing.builtin: \"cfdocs\"\narrayAppend(myarray, 1);",
        "pascal":"// function_call.casing.builtin: \"pascal\"\nArrayAppend(myarray, 1);",
        "ignored":"// function_call.casing.builtin: \"ignored\"\nARRAYAPPEND(myarray, 1);"
    },
    "function_call.casing.userdefined":{
        "ignored":"// function_call.casing.userdefined: \"ignored\"\nmyFunc();",
        "camel":"// function_call.casing.userdefined: \"camel\"\nmyFunc();",
        "pascal":"// function_call.casing.userdefined: \"pascal\"\nMyFunc();"
    },
    "function_call.empty_padding":{
        "true":"// function_call.empty_padding: true\nmyFunc( );",
        "false":"// function_call.empty_padding: false\nmyFunc();"
    },
    "function_call.multiline.leading_comma":{
        "true":"// function_call.multiline.leading_comma: true\nmyFunc(\n      1\n    , 2\n    , 3\n    , 4\n);",
        "false":"// function_call.multiline.leading_comma: false\nmyFunc(\n    1,\n    2,\n    3,\n    4\n);"
    },
    "function_call.multiline.leading_comma.padding":{
        "true":"// function_call.multiline.leading_comma.padding: true\nmyFunc(\n      1\n    , 2\n    , 3\n    , 4\n);",
        "false":"// function_call.multiline.leading_comma.padding: false\nmyFunc(\n     1\n    ,2\n    ,3\n    ,4\n);"
    },
    "function_call.padding":{
        "true":"// function_call.padding: true\nmyFunc( 1, 2 );",
        "false":"// function_call.padding: false\nmyFunc(1, 2);"
    },
    "function_declaration.empty_padding":{
        "true":"// function_declaration.empty_padding: true\nfunction example( ) {\n}",
        "false":"// function_declaration.empty_padding: false\nfunction example() {\n}"
    },
    "function_declaration.spacing_to_group":{
        "true":"// function_declaration.spacing_to_group: true\nif (true) {\n}",
        "false":"// function_declaration.spacing_to_group: false\nif(true) {\n}"
    },
    "function_declaration.group_to_block_spacing":{
        "spaced":"// function_declaration.group_to_block_spacing: \"spaced\"\nfunction example() {\n}",
        "compact":"// function_declaration.group_to_block_spacing: \"compact\"\nfunction example(){\n}",
        "newline":"// function_declaration.group_to_block_spacing: \"newline\"\nfunction example()\n{\n}"
    },
    "function_declaration.multiline.leading_comma":{
        "true":"// function_declaration.multiline.leading_comma: true\nfunction example(\n      a\n    , b\n    , c\n    , d\n) {\n}",
        "false":"// function_declaration.multiline.leading_comma: false\nfunction example(\n    a,\n    b,\n    c,\n    d\n) {\n}"
    },
    "function_declaration.multiline.leading_comma.padding":{
        "true":"// function_declaration.multiline.leading_comma.padding: true\nfunction example(\n      a\n    , b\n    , c\n    , d\n) {\n}",
        "false":"// function_declaration.multiline.leading_comma.padding: false\nfunction example(\n     a\n    ,b\n    ,c\n    ,d\n) {\n}"
    },
    "function_declaration.padding":{
        "true":"// function_declaration.padding: true\nfunction example( a, b ) {\n}",
        "false":"// function_declaration.padding: false\nfunction example(a, b) {\n}"
    },
    "indent_size":{
        "4":"// indent_size: 4\ndo {\n    myFunc();\n}",
        "2":"// indent_size: 2\ndo {\n  myFunc();\n}"
    },
    "keywords.block_to_keyword_spacing":{
        "spaced":"// keywords.block_to_keyword_spacing: \"spaced\"\nif (true) {\n} else {\n}",
        "compact":"// keywords.block_to_keyword_spacing: \"compact\"\nif (true) {\n}else {\n}",
        "newline":"// keywords.block_to_keyword_spacing: \"newline\"\nif (true) {\n}\nelse {\n}"
    },
    "keywords.empty_group_spacing":{
        "true":"// keywords.empty_group_spacing: true\nif ( ) {\n}",
        "false":"// keywords.empty_group_spacing: false\nif () {\n}"
    },
    "keywords.group_to_block_spacing":{
        "spaced":"// keywords.group_to_block_spacing: \"spaced\"\nif (true) {\n}",
        "compact":"// keywords.group_to_block_spacing: \"compact\"\nif (true){\n}",
        "newline":"// keywords.group_to_block_spacing: \"newline\"\nif (true)\n{\n}"
    },
    "keywords.padding_inside_group":{
        "true":"// keywords.padding_inside_group: true\nif ( true ) {\n}",
        "false":"// keywords.padding_inside_group: false\nif (true) {\n}"
    },
    "keywords.spacing_to_block":{
        "spaced":"// keywords.spacing_to_block: \"spaced\"\ndo {\n}",
        "compact":"// keywords.spacing_to_block: \"compact\"\ndo{\n}",
        "newline":"// keywords.spacing_to_block: \"newline\"\ndo\n{\n}"
    },
    "keywords.spacing_to_group":{
        "true":"// keywords.spacing_to_group: true\nif (true) {\n}",
        "false":"// keywords.spacing_to_group: false\nif(true) {\n}"
    },
    "parentheses.padding":{
        "true":"// parentheses.padding: true\na = ( 1 + 2 );",
        "false":"// parentheses.padding: false\na = (1 + 2);"
    },
    "strings.attributes.quote":{
        "single":"// strings.attributes.quote: \"single\"\nhttp url='www.google.com';\nparam name='key';",
        "double":"// strings.attributes.quote: \"double\"\nhttp url=\"www.google.com\";\nparam name=\"key\";",
        "ignored":"// strings.attributes.quote: \"ignored\"\nhttp url='www.google.com';\nparam name=\"key\";"
    },
    "strings.quote":{
        "single":"// strings.quote: \"single\"\na = 'One';\nb = 'Two';",
        "double":"// strings.quote: \"double\"\na = \"One\";\nb = \"Two\";",
        "ignored":"// strings.quote: \"ignored\"\na = \"One\";\nb = 'Two';"
    },
    "strings.convertNestedQuotes":{
        "true":"// strings.convertNestedQuotes: true\na = '''';",
        "false":"// strings.convertNestedQuotes: false\na = \"'\";"
    },
    "struct.empty_padding":{
        "true":"// struct.empty_padding: true\nmyStruct = { };",
        "false":"// struct.empty_padding: false\nmyStruct = {};"
    },
    "struct.multiline.leading_comma":{
        "true":"// struct.multiline.leading_comma: true\nmyStruct = {\n      a: 1\n    , b: 2\n    , c: 3\n    , d: 4\n};",
        "false":"// struct.multiline.leading_comma: false\nmyStruct = {\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4\n};"
    },
    "struct.multiline.leading_comma.padding":{
        "true":"// struct.multiline.leading_comma.padding: true\nmyStruct = {\n      a: 1\n    , b: 2\n    , c: 3\n    , d: 4\n};",
        "false":"// struct.multiline.leading_comma.padding: false\nmyStruct = {\n     a: 1\n    ,b: 2\n    ,c: 3\n    ,d: 4\n};"
    },
    "struct.padding":{
        "true":"// struct.padding: true\nmyStruct = { a: 1, b: 2 };",
        "false":"// struct.padding: false\nmyStruct = {a: 1, b: 2};"
    },
    "struct.quote_keys":{
        "true":"// struct.quote_keys: true\nmyStruct = {'a': 1, 'b': 2};",
        "false":"// struct.quote_keys: false\nmyStruct = {a: 1, 'b': 2};"
    },
    "struct.separator":{
        ": ":"// struct.separator: \": \"\nmyStruct = {a: 1, b: 2};",
        " = ":"// struct.separator: \" = \"\nmyStruct = {a = 1, b = 2};",
        " : ":"// struct.separator: \" : \"\nmyStruct = {a : 1, b : 2};",
        "=":"// struct.separator: \"=\"\nmyStruct = {a=1, b=2};"
    },
    "tags.lowercase":{
        "true":"<cfif a eq b>\n    <div></div>\n</cfif>",
        "false":"<CFIF a eq b>\n    <DIV></DIV>\n</CFIF>"
    }
}