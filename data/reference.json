{
    "alignment.consecutive.assignments": {
        "description": "When true, cfformat will attempt to align consecutive variable assignments, named function call arguments, and struct key value pairs.",
        "example": {
            "code": "var a = 1;\nvar ab = 2;"
        },
        "type": "boolean"
    },
    "alignment.consecutive.params": {
        "description": "When true, cfformat will attempt to align the attributes of consecutive params.",
        "example": {
            "code": "param name=\"a\" type=\"string\";\nparam name=\"abcdefg\" type=\"string\";"
        },
        "type": "boolean"
    },
    "alignment.consecutive.properties": {
        "description": "When true, cfformat will attempt to align the attributes of consecutive properties.",
        "example": {
            "code": "property name=\"requestService\" inject=\"coldbox:requestService\";\nproperty name=\"log\" inject=\"logbox:logger:{this}\";"
        },
        "type": "boolean"
    },
    "array.empty_padding": {
        "description": "When true, empty arrays are padded with a space.",
        "example": {
            "code": "myArray = [];"
        },
        "type": "boolean"
    },
    "array.multiline.element_count": {
        "description": "When an array has this number of elements or more, print it onto multiple lines.",
        "type": "integer"
    },
    "array.multiline.leading_comma": {
        "description": "Whether to use a leading comma when an array is printed on multiple lines.",
        "example": {
            "code": "myArray = [1,2,3,4];",
            "settings": {
                "array.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "array.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when an array is printed on multiple lines.",
        "example": {
            "code": "myArray = [1,2,3,4];",
            "settings": {
                "array.multiline.leading_comma": true,
                "array.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "array.multiline.min_length": {
        "description": "No matter how many elements an array has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "array.padding": {
        "description": "When true, non-empty arrays are padded with spaces.",
        "example": {
            "code": "myArray = [1,2];"
        },
        "type": "boolean"
    },
    "binary_operators.padding": {
        "description": "Whether to pad binary operators with spaces.",
        "example": {
            "code": "a=1+2;"
        },
        "type": "boolean"
    },
    "brackets.padding": {
        "description": "When true, bracketed accessors are padded with spaces.",
        "example": {
            "code": "a['mykey'][1]=7;"
        },
        "type": "boolean"
    },
    "comment.asterisks": {
        "description": "When enabled, if every line after the first of a block comment starts with a `*`, they will be aligned. Setting this to \"ignored\" means no alignment will be done.",
        "example": {
            "code": "{/**\n      * a comment\n    */}"
        },
        "type": "string",
        "values": [
            "align",
            "indent",
            "ignored"
        ]
    },
    "for_loop_semicolons.padding": {
        "description": "When true, insert a space after for loop semicolons.",
        "example": {
            "code": "for(var i=0;i<10;i++){}"
        },
        "type": "boolean"
    },
    "function_anonymous.empty_padding": {
        "description": "When true, pad anonymous function declarations that have no parameters with a space.",
        "example": {
            "code": "function() {}"
        },
        "type": "boolean"
    },
    "function_anonymous.spacing_to_group": {
        "description": "Whether to space a function name from following group.",
        "example": {
            "code": "if (true){}"
        },
        "type": "boolean"
    },
    "function_anonymous.group_to_block_spacing": {
        "description": "How to space from the anonymous function parameters to the function block.",
        "example": {
            "code": "function() {}"
        },
        "type": "string",
        "values": [
            "spaced",
            "compact",
            "newline"
        ]
    },
    "function_anonymous.multiline.element_count": {
        "description": "When an anonymous function declaration has this number of parameters, split them onto multiple lines.",
        "type": "integer"
    },
    "function_anonymous.multiline.leading_comma": {
        "description": "Whether to use a leading comma when anonymous function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function(a,b,c,d) {}",
            "settings": {
                "function_anonymous.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_anonymous.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when anonymous function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function(a,b,c,d) {}",
            "settings": {
                "function_anonymous.multiline.leading_comma": true,
                "function_anonymous.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_anonymous.multiline.min_length": {
        "description": "No matter how many parameters an anonymous function declaration has, if they can be printed in this many columns or less, keep them on one line.",
        "type": "integer"
    },
    "function_anonymous.padding": {
        "description": "Whether to pad non-empty anonymous function declarations with spaces.",
        "example": {
            "code": "function(a,b) {}"
        },
        "type": "boolean"
    },
    "function_call.casing.builtin": {
        "description": "Formats builtin function call casing. The default is to match cfdocs.org data. An alternative is to always capitalize the first letter (pascal). Set this setting to \"ignored\" to leave casing as is.",
        "example": {
            "code": "ARRAYAPPEND(myarray, 1);"
        },
        "type": "string",
        "values": [
            "cfdocs",
            "pascal",
            "ignored"
        ]
    },
    "function_call.casing.userdefined": {
        "description": "Formats user defined function call casing. The default is to leave as is (this is set to \"ignored\"). Alternatives are to always capitalize the first letter (pascal), or always lower case it (camel).",
        "example": {
            "code": "myFunc();"
        },
        "type": "string",
        "values": [
            "ignored",
            "camel",
            "pascal"
        ]
    },
    "function_call.empty_padding": {
        "description": "When true, function calls with no arguments are padded with a space.",
        "example": {
            "code": "myFunc();"
        },
        "type": "boolean"
    },
    "function_call.multiline.element_count": {
        "description": "When a function call has this number of arguments, split them onto multiple lines.",
        "type": "integer"
    },
    "function_call.multiline.leading_comma": {
        "description": "Whether to use a leading comma when function call arguments are printed on multiple lines.",
        "example": {
            "code": "myFunc(1,2,3,4);",
            "settings": {
                "function_call.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_call.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when function call arguments are printed on multiple lines.",
        "example": {
            "code": "myFunc(1,2,3,4);",
            "settings": {
                "function_call.multiline.leading_comma": true,
                "function_call.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_call.multiline.min_length": {
        "description": "No matter how many arguments a function call has, if they can be printed inline in this many columns or less, keep them on one line.",
        "type": "integer"
    },
    "function_call.padding": {
        "description": "Whether to pad function call arguments with spaces.",
        "example": {
            "code": "myFunc(1,2);"
        },
        "type": "boolean"
    },
    "function_declaration.empty_padding": {
        "description": "When true, pad function declarations that have no parameters with a space.",
        "example": {
            "code": "function example() {}"
        },
        "type": "boolean"
    },
    "function_declaration.spacing_to_group": {
        "description": "Whether to space a function name from following group.",
        "example": {
            "code": "if (true){}"
        },
        "type": "boolean"
    },
    "function_declaration.group_to_block_spacing": {
        "description": "How to space from the function parameters to the function block.",
        "example": {
            "code": "function example() {}"
        },
        "type": "string",
        "values": [
            "spaced",
            "compact",
            "newline"
        ]
    },
    "function_declaration.multiline.element_count": {
        "description": "When a function declaration has this number of parameters, split them onto multiple lines.",
        "type": "integer"
    },
    "function_declaration.multiline.leading_comma": {
        "description": "Whether to use a leading comma when function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function example(a,b,c,d) {}",
            "settings": {
                "function_declaration.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_declaration.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when function declaration parameters are printed on multiple lines.",
        "example": {
            "code": "function example(a,b,c,d) {}",
            "settings": {
                "function_declaration.multiline.leading_comma": true,
                "function_declaration.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "function_declaration.multiline.min_length": {
        "description": "No matter how many parameters a function declaration has, if they can be printed in this many columns or less, keep them on one line.",
        "type": "integer"
    },
    "function_declaration.padding": {
        "description": "Whether to pad non-empty function declarations with spaces.",
        "example": {
            "code": "function example(a,b) {}"
        },
        "type": "boolean"
    },
    "indent_size": {
        "description": "Each indent level or tab is equivalent to this many spaces.",
        "example": {
            "code": "do {myFunc();}",
            "values": [
                4,
                2
            ]
        },
        "type": "integer"
    },
    "keywords.block_to_keyword_spacing": {
        "description": "Spacing for keywords following a block.",
        "example": {
            "code": "if(true){}else{}"
        },
        "type": "string",
        "values": [
            "spaced",
            "compact",
            "newline"
        ]
    },
    "keywords.empty_group_spacing": {
        "description": "Whether to pad empty keyword groups.",
        "example": {
            "code": "if(){}"
        },
        "type": "boolean"
    },
    "keywords.group_to_block_spacing": {
        "description": "Spacing from a keyword group to the following block.",
        "example": {
            "code": "if(true){}"
        },
        "type": "string",
        "values": [
            "spaced",
            "compact",
            "newline"
        ]
    },
    "keywords.padding_inside_group": {
        "description": "Whether to pad inside non-empty keyword groups.",
        "example": {
            "code": "if(true){}"
        },
        "type": "boolean"
    },
    "keywords.spacing_to_block": {
        "description": "Spacing from a keyword to the following block.",
        "example": {
            "code": "do{}"
        },
        "type": "string",
        "values": [
            "spaced",
            "compact",
            "newline"
        ]
    },
    "keywords.spacing_to_group": {
        "description": "Whether to space a keyword from following group.",
        "example": {
            "code": "if(true){}"
        },
        "type": "boolean"
    },
    "max_columns": {
        "description": "When rendering a delimited item (struct, array, function call, function declaration parameters), this is the maximum number of columns to render on one line before splitting the elements onto multiple lines.",
        "type": "integer"
    },
    "metadata.multiline.element_count": {
        "description": "When a component or function declaration has this number of metadata attributes or more, print it onto multiple lines.",
        "type": "integer"
    },
    "metadata.multiline.min_length": {
        "description": "No matter how many metadata attributes a component or function declaration has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "method_call.chain.multiline": {
        "description": "When a method call chain has this many method calls, always split them onto multiple lines.",
        "type": "integer"
    },
    "newline": {
        "description": "The new line character(s) to use. The default is \"os\" which uses \\r\\n on Windows, and \\n otherwise.",
        "type": "string",
        "values": [
            "os",
            "\n",
            "\r\n"
        ]
    },
    "parentheses.padding": {
        "description": "Whether to pad the contents of a group.",
        "example": {
            "code": "a=(1+2);"
        },
        "type": "boolean"
    },
    "property.multiline.element_count": {
        "description": "When a property has this number of attributes or more, print it onto multiple lines.",
        "type": "integer"
    },
    "property.multiline.min_length": {
        "description": "No matter how many attributes a property has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "strings.attributes.quote": {
        "description": "Whether to use a single or double quote for attribute values. If set to \"ignored\", leaves attribute value quotes as they are found.",
        "example": {
            "code": "http url='www.google.com';\nparam name=\"key\";"
        },
        "type": "string",
        "values": [
            "single",
            "double",
            "ignored"
        ]
    },
    "strings.quote": {
        "description": "Whether to use a single or double quote for strings. If set to \"ignored\", leaves string quotes as they are found.",
        "example": {
            "code": "a=\"One\";\nb='Two';"
        },
        "type": "string",
        "values": [
            "single",
            "double",
            "ignored"
        ]
    },
    "strings.convertNestedQuotes": {
        "description": "Whether to convert the quote character for strings that contain quotes within them.",
        "example": {
            "code": "a=\"'\";"
        },
        "type": "boolean"
    },
    "struct.empty_padding": {
        "description": "When true, non-empty structs are padded with spaces.",
        "example": {
            "code": "myStruct={};"
        },
        "type": "boolean"
    },
    "struct.multiline.element_count": {
        "description": "When a struct has this number of elements or more, print it onto multiple lines.",
        "type": "integer"
    },
    "struct.multiline.leading_comma": {
        "description": "Whether to use a leading comma when an struct is printed on multiple lines.",
        "example": {
            "code": "myStruct={a:1,b:2,c:3,d:4};",
            "settings": {
                "struct.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "struct.multiline.leading_comma.padding": {
        "description": "Whether to insert a space after leading commas when an struct is printed on multiple lines.",
        "example": {
            "code": "myStruct={a:1,b:2,c:3,d:4};",
            "settings": {
                "struct.multiline.leading_comma": true,
                "struct.multiline.min_length": 1
            }
        },
        "type": "boolean"
    },
    "struct.multiline.min_length": {
        "description": "No matter how many elements an struct has, if it is shorter than this length, keep it on one line.",
        "type": "integer"
    },
    "struct.padding": {
        "description": "Whether to pad non-empty structs with spaces.",
        "example": {
            "code": "myStruct={a:1,b:2};"
        },
        "type": "boolean"
    },
    "struct.quote_keys": {
        "description": "When true, struct keys are quoted.",
        "example": {
            "code": "myStruct={a: 1, 'b': 2};"
        },
        "type": "boolean"
    },
    "struct.separator": {
        "description": "The key value separator to use in structs - it must contain either a single `:` or `=` and be no more than 3 characters in length.",
        "example": {
            "code": "myStruct={a:1,b:2};",
            "values": [
                ": ",
                " = ",
                " : ",
                "="
            ]
        },
        "type": "struct-key-value"
    },
    "tab_indent": {
        "description": "Whether to indent using tab characters or not.",
        "type": "boolean"
    },
    "tags.lowercase": {
        "description": "When true, tag names are lowercased. If false, tag name case is left as is.",
        "example": {
            "code": "<CFIF a eq b><DIV></DIV></CFIF>"
        },
        "type": "boolean"
    }
}
